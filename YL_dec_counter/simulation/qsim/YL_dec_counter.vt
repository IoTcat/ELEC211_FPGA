// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/03/2020 20:26:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    YL_dec_counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module YL_dec_counter_vlg_sample_tst(
	clear,
	clock,
	enc,
	ent,
	sampler_tx
);
input  clear;
input  clock;
input  enc;
input  ent;
output sampler_tx;

reg sample;
time current_time;
always @(clear or clock or enc or ent)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module YL_dec_counter_vlg_check_tst (
	rco,
	value,
	sampler_rx
);
input  rco;
input [3:0] value;
input sampler_rx;

reg  rco_expected;
reg [3:0] value_expected;

reg  rco_prev;
reg [3:0] value_prev;

reg  rco_expected_prev;
reg [3:0] value_expected_prev;

reg  last_rco_exp;
reg [3:0] last_value_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	rco_prev = rco;
	value_prev = value;
end

// update expected /o prevs

always @(trigger)
begin
	rco_expected_prev = rco_expected;
	value_expected_prev = value_expected;
end



// expected rco
initial
begin
	rco_expected = 1'bX;
end 
// expected value[ 3 ]
initial
begin
	value_expected[3] = 1'bX;
end 
// expected value[ 2 ]
initial
begin
	value_expected[2] = 1'bX;
end 
// expected value[ 1 ]
initial
begin
	value_expected[1] = 1'bX;
end 
// expected value[ 0 ]
initial
begin
	value_expected[0] = 1'bX;
end 
// generate trigger
always @(rco_expected or rco or value_expected or value)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected rco = %b | expected value = %b | ",rco_expected_prev,value_expected_prev);
	$display("| real rco = %b | real value = %b | ",rco_prev,value_prev);
`endif
	if (
		( rco_expected_prev !== 1'bx ) && ( rco_prev !== rco_expected_prev )
		&& ((rco_expected_prev !== last_rco_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rco :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rco_expected_prev);
		$display ("     Real value = %b", rco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rco_exp = rco_expected_prev;
	end
	if (
		( value_expected_prev[0] !== 1'bx ) && ( value_prev[0] !== value_expected_prev[0] )
		&& ((value_expected_prev[0] !== last_value_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_value_exp[0] = value_expected_prev[0];
	end
	if (
		( value_expected_prev[1] !== 1'bx ) && ( value_prev[1] !== value_expected_prev[1] )
		&& ((value_expected_prev[1] !== last_value_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_value_exp[1] = value_expected_prev[1];
	end
	if (
		( value_expected_prev[2] !== 1'bx ) && ( value_prev[2] !== value_expected_prev[2] )
		&& ((value_expected_prev[2] !== last_value_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_value_exp[2] = value_expected_prev[2];
	end
	if (
		( value_expected_prev[3] !== 1'bx ) && ( value_prev[3] !== value_expected_prev[3] )
		&& ((value_expected_prev[3] !== last_value_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_value_exp[3] = value_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module YL_dec_counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg clock;
reg enc;
reg ent;
// wires                                               
wire rco;
wire [3:0] value;

wire sampler;                             

// assign statements (if any)                          
YL_dec_counter i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.clock(clock),
	.enc(enc),
	.ent(ent),
	.rco(rco),
	.value(value)
);

// clear
initial
begin
	clear = 1'b1;
	clear = #320000 1'b0;
	clear = #280000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// enc
initial
begin
	enc = 1'b1;
	enc = #400000 1'b0;
	enc = #360000 1'b1;
end 

// ent
initial
begin
	ent = 1'b0;
end 

YL_dec_counter_vlg_sample_tst tb_sample (
	.clear(clear),
	.clock(clock),
	.enc(enc),
	.ent(ent),
	.sampler_tx(sampler)
);

YL_dec_counter_vlg_check_tst tb_out(
	.rco(rco),
	.value(value),
	.sampler_rx(sampler)
);
endmodule

